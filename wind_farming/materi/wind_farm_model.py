# -*- coding: utf-8 -*-
"""Wind_Farm_Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QjNyChSGViDdKz2Jfs4oNKwMRZ6fMWrF
"""

!pip install windpowerlib

import pandas as pd
import matplotlib.pyplot as plt
from windpowerlib import data as wt
from windpowerlib import TurbineClusterModelChain,WindTurbine,WindFarm,ModelChain

Weather_Data = pd.read_csv('weather_montreal.csv',index_col=0,header=[0,1],
                           date_parser=lambda idx:pd.to_datetime(idx,utc=True))
Weather_Data

Selected_turbine = {'turbine_type':'E48/800','hub_height': 60}
W_Turbine = WindTurbine(**Selected_turbine)

#wind_turbine_fleet = pd.DataFrame({'wind_turbine':[W_Turbine,None],
#                                   'number_of_turbines':[10,None],})
                                   # 'total_capacity':[8000,None]})

farm_data = {
             'wind_turbine_fleet':[W_Turbine.to_group(10)],
             'efficiency':0.9
}

farm_data_2 = WindFarm(**farm_data)

Wind_Farm_Submodel = {
       'wake_losses_model': 'wind_farm_efficiency',           # 'dena_mean' (default)
       'smoothing': True,                                     # Default is False
       'satandard_deviation_method': 'turbulence_intensity',  # Staffell_Pfenniger
       'wind_speed_model' : 'hellman',
       'density_model' : 'ideal_gas',
       'temperature_model':'linear_gradient',
       'power_output_model':'power_curve',
       'density_correction':True,
       'obstacle_height' : 0,
       'hellman_exp':0.25}

Model_Farm = TurbineClusterModelChain(farm_data_2,**Wind_Farm_Submodel).run_model(Weather_Data)

Farm_Power_Output = (Model_Farm.power_output)/1000

Farm_Power_Output

Tubine_Sub_Models = {
    'wind_speed_model': 'hellman',          #'logarithmic' this one is the default
                                            # 'interpolation-extrapolation'
    'density_model': 'ideal_gas',           # 'barometric' (default)
                                            # 'interpolation-extrapolation'
    'temperature_model':'linear_gradient',  # 'interpolation-extrapolation'
    
    'power_output_model' :'power_coefficient_curve',  # 'power_curve' is the default

    'density_correction': True,             # False is default
    'obstacle_height': 0,                   # default is 0
    'hellman_exp': 0.25
}

Model = ModelChain(W_Turbine,**Tubine_Sub_Models).run_model(Weather_Data)

Turbine_Power_Output = (Model.power_output)/1000
Turbine_Power_Output

plt.plot(Farm_Power_Output,color = 'b')
plt.plot(Turbine_Power_Output, color = 'r')
plt.xlabel('Date')
plt.ylabel('Power - kW')
plt.show()